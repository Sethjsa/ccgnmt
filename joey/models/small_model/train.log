2021-05-30 17:26:03,962 - INFO - root - Hello! This is Joey-NMT (version 1.3).
2021-05-30 17:26:03,963 - INFO - joeynmt.data - Loading training data...
2021-05-30 17:26:03,996 - INFO - joeynmt.data - Building vocabulary...
2021-05-30 17:26:04,004 - INFO - joeynmt.data - Loading dev data...
2021-05-30 17:26:04,005 - INFO - joeynmt.data - Loading test data...
2021-05-30 17:26:04,005 - INFO - joeynmt.data - Data loaded.
2021-05-30 17:26:04,005 - INFO - joeynmt.model - Building an encoder-decoder model...
2021-05-30 17:26:04,008 - INFO - joeynmt.model - Enc-dec model built.
2021-05-30 17:26:04,012 - INFO - joeynmt.training - Total params: 66376
2021-05-30 17:26:04,012 - DEBUG - joeynmt.training - Trainable parameters: ['decoder.att_vector_layer.bias', 'decoder.att_vector_layer.weight', 'decoder.attention.energy_layer.weight', 'decoder.attention.key_layer.weight', 'decoder.attention.query_layer.weight', 'decoder.output_layer.weight', 'decoder.rnn.bias_hh_l0', 'decoder.rnn.bias_hh_l1', 'decoder.rnn.bias_ih_l0', 'decoder.rnn.bias_ih_l1', 'decoder.rnn.weight_hh_l0', 'decoder.rnn.weight_hh_l1', 'decoder.rnn.weight_ih_l0', 'decoder.rnn.weight_ih_l1', 'encoder.rnn.bias_hh_l0', 'encoder.rnn.bias_hh_l0_reverse', 'encoder.rnn.bias_hh_l1', 'encoder.rnn.bias_hh_l1_reverse', 'encoder.rnn.bias_hh_l2', 'encoder.rnn.bias_hh_l2_reverse', 'encoder.rnn.bias_ih_l0', 'encoder.rnn.bias_ih_l0_reverse', 'encoder.rnn.bias_ih_l1', 'encoder.rnn.bias_ih_l1_reverse', 'encoder.rnn.bias_ih_l2', 'encoder.rnn.bias_ih_l2_reverse', 'encoder.rnn.weight_hh_l0', 'encoder.rnn.weight_hh_l0_reverse', 'encoder.rnn.weight_hh_l1', 'encoder.rnn.weight_hh_l1_reverse', 'encoder.rnn.weight_hh_l2', 'encoder.rnn.weight_hh_l2_reverse', 'encoder.rnn.weight_ih_l0', 'encoder.rnn.weight_ih_l0_reverse', 'encoder.rnn.weight_ih_l1', 'encoder.rnn.weight_ih_l1_reverse', 'encoder.rnn.weight_ih_l2', 'encoder.rnn.weight_ih_l2_reverse', 'src_embed.lut.weight', 'trg_embed.lut.weight']
2021-05-30 17:26:04,014 - INFO - joeynmt.helpers - cfg.name                           : my_experiment
2021-05-30 17:26:04,014 - INFO - joeynmt.helpers - cfg.data.src                       : de
2021-05-30 17:26:04,014 - INFO - joeynmt.helpers - cfg.data.trg                       : en
2021-05-30 17:26:04,014 - INFO - joeynmt.helpers - cfg.data.train                     : test/data/toy/train
2021-05-30 17:26:04,014 - INFO - joeynmt.helpers - cfg.data.dev                       : test/data/toy/dev
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.test                      : test/data/toy/test
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.random_train_subset       : -1
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.level                     : word
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.lowercase                 : True
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.max_sent_length           : 30
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.src_voc_min_freq          : 1
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.src_voc_limit             : 101
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.trg_voc_min_freq          : 1
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.data.trg_voc_limit             : 102
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.testing.beam_size              : 5
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.testing.alpha                  : 1.0
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.testing.postprocess            : True
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.testing.bpe_type               : subword-nmt
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.testing.sacrebleu.remove_whitespace : True
2021-05-30 17:26:04,015 - INFO - joeynmt.helpers - cfg.testing.sacrebleu.tokenize     : 13a
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.reset_best_ckpt       : False
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.reset_scheduler       : False
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.reset_optimizer       : False
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.random_seed           : 42
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.optimizer             : adam
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.adam_betas            : [0.9, 0.999]
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.learning_rate         : 0.005
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.learning_rate_min     : 0.0001
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.clip_grad_val         : 1.0
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.weight_decay          : 0.0
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.batch_size            : 10
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.batch_type            : sentence
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.eval_batch_size       : 10
2021-05-30 17:26:04,016 - INFO - joeynmt.helpers - cfg.training.eval_batch_type       : sentence
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.batch_multiplier      : 1
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.normalization         : batch
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.scheduling            : plateau
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.patience              : 5
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.decrease_factor       : 0.5
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.epochs                : 1
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.validation_freq       : 10
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.logging_freq          : 10
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.eval_metric           : bleu
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.early_stopping_metric : loss
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.model_dir             : models/small_model
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.overwrite             : True
2021-05-30 17:26:04,017 - INFO - joeynmt.helpers - cfg.training.shuffle               : True
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.use_cuda              : False
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.fp16                  : False
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.max_output_length     : 31
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.print_valid_sents     : [0, 1, 2]
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.keep_last_ckpts       : 3
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.label_smoothing       : 0.0
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.training.save_latest_ckpt      : True
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.model.initializer              : xavier
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.model.init_weight              : 0.01
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.model.init_gain                : 1.0
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.model.bias_initializer         : zeros
2021-05-30 17:26:04,018 - INFO - joeynmt.helpers - cfg.model.embed_initializer        : normal
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.embed_init_weight        : 0.1
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.embed_init_gain          : 1.0
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.init_rnn_orthogonal      : False
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.lstm_forget_gate         : 1.0
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.tied_embeddings          : False
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.tied_softmax             : False
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.type             : recurrent
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.rnn_type         : gru
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.embeddings.embedding_dim : 16
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.embeddings.scale : False
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.embeddings.freeze : False
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.hidden_size      : 30
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.bidirectional    : True
2021-05-30 17:26:04,019 - INFO - joeynmt.helpers - cfg.model.encoder.dropout          : 0.2
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.encoder.num_layers       : 3
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.encoder.freeze           : False
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.type             : recurrent
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.rnn_type         : gru
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.embeddings.embedding_dim : 16
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.embeddings.scale : False
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.embeddings.freeze : False
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.hidden_size      : 30
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.dropout          : 0.2
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.hidden_dropout   : 0.2
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.num_layers       : 2
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.input_feeding    : True
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.init_hidden      : last
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.decoder.attention        : bahdanau
2021-05-30 17:26:04,020 - INFO - joeynmt.helpers - cfg.model.freeze                   : False
2021-05-30 17:26:04,021 - INFO - joeynmt.helpers - Data set sizes: 
	train 922,
	valid 20,
	test 20
2021-05-30 17:26:04,021 - INFO - joeynmt.helpers - First training example:
	[SRC] david gallo: das ist bill lange. ich bin dave gallo.
	[TRG] david gallo: this is bill lange. i'm dave gallo.
2021-05-30 17:26:04,021 - INFO - joeynmt.helpers - First 10 words (src): (0) <unk> (1) <pad> (2) <s> (3) </s> (4) und (5) die (6) wir (7) der (8) sie (9) das
2021-05-30 17:26:04,021 - INFO - joeynmt.helpers - First 10 words (trg): (0) <unk> (1) <pad> (2) <s> (3) </s> (4) the (5) and (6) of (7) to (8) a (9) in
2021-05-30 17:26:04,021 - INFO - joeynmt.helpers - Number of Src words (types): 105
2021-05-30 17:26:04,021 - INFO - joeynmt.helpers - Number of Trg words (types): 106
2021-05-30 17:26:04,021 - INFO - joeynmt.training - Model(
	encoder=RecurrentEncoder(GRU(16, 30, num_layers=3, batch_first=True, dropout=0.2, bidirectional=True)),
	decoder=RecurrentDecoder(rnn=GRU(46, 30, num_layers=2, batch_first=True, dropout=0.2), attention=BahdanauAttention),
	src_embed=Embeddings(embedding_dim=16, vocab_size=105),
	trg_embed=Embeddings(embedding_dim=16, vocab_size=106))
2021-05-30 17:26:04,021 - INFO - joeynmt.training - Train stats:
	device: cpu
	n_gpu: 0
	16-bits training: False
	gradient accumulation: 1
	batch size per device: 10
	total batch size (w. parallel & accumulation): 10
2021-05-30 17:26:04,022 - INFO - joeynmt.training - EPOCH 1
2021-05-30 17:26:04,432 - INFO - joeynmt.training - Epoch   1, Step:       10, Batch Loss:    19.871571, Tokens per Sec:     2522, Lr: 0.005000
2021-05-30 17:26:04,553 - INFO - joeynmt.training - Hooray! New best validation result [loss]!
2021-05-30 17:26:04,554 - INFO - joeynmt.training - Saving new checkpoint.
2021-05-30 17:26:04,560 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:04,560 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:04,560 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:04,560 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:04,560 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:04,560 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:04,560 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:04,561 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:04,561 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:04,561 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:04,561 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:04,561 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:04,561 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:04,561 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:04,561 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:04,561 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:04,561 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:04,561 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:04,561 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       10: bleu:   0.01, loss: 1045.0956, ppl:  15.8759, duration: 0.1290s
2021-05-30 17:26:04,622 - DEBUG - matplotlib.font_manager - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.064516129032258.
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,623 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,624 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-05-30 17:26:04,625 - DEBUG - matplotlib.font_manager - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.064516129032258 to DejaVu Sans ('/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-05-30 17:26:04,744 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:04,783 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:04,783 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:05,110 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:05,132 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:05,132 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:05,442 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:05,467 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:05,467 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:06,097 - INFO - joeynmt.training - Epoch   1, Step:       20, Batch Loss:    21.683571, Tokens per Sec:     1002, Lr: 0.005000
2021-05-30 17:26:06,236 - INFO - joeynmt.training - Hooray! New best validation result [loss]!
2021-05-30 17:26:06,237 - INFO - joeynmt.training - Saving new checkpoint.
2021-05-30 17:26:06,242 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:06,242 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:06,242 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:06,242 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:06,242 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:06,242 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:06,242 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:06,242 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:06,242 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:06,242 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:06,242 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:06,242 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:06,242 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:06,243 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:06,243 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:06,243 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:06,243 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:06,243 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:06,243 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       20: bleu:   0.01, loss: 999.4313, ppl:  14.0693, duration: 0.1449s
2021-05-30 17:26:06,354 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:06,380 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:06,380 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:06,665 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:06,693 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:06,693 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:06,967 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:06,992 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:06,993 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:07,683 - INFO - joeynmt.training - Epoch   1, Step:       30, Batch Loss:    32.438263, Tokens per Sec:     1029, Lr: 0.005000
2021-05-30 17:26:07,806 - INFO - joeynmt.training - Hooray! New best validation result [loss]!
2021-05-30 17:26:07,807 - INFO - joeynmt.training - Saving new checkpoint.
2021-05-30 17:26:07,812 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:07,812 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:07,812 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:07,812 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:07,812 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:07,813 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:07,813 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:07,813 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:07,813 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:07,813 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:07,813 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:07,813 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:07,813 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       30: bleu:   0.01, loss: 994.4027, ppl:  13.8834, duration: 0.1295s
2021-05-30 17:26:07,940 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:07,968 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:07,968 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:08,237 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:08,260 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:08,260 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:08,585 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:08,610 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:08,610 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:09,249 - INFO - joeynmt.training - Epoch   1, Step:       40, Batch Loss:    39.462688, Tokens per Sec:     1038, Lr: 0.005000
2021-05-30 17:26:09,379 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:09,379 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:09,379 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:09,379 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:09,379 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:09,379 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:09,379 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:09,380 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:09,380 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:09,380 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:09,380 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:09,380 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:09,380 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:09,380 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:09,380 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:09,380 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:09,380 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:09,380 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:09,380 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       40: bleu:   0.01, loss: 999.0395, ppl:  14.0548, duration: 0.1310s
2021-05-30 17:26:09,509 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:09,543 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:09,543 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:09,806 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:09,828 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:09,828 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:10,094 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:10,119 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:10,119 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:10,684 - INFO - joeynmt.training - Epoch   1, Step:       50, Batch Loss:     8.803011, Tokens per Sec:      853, Lr: 0.005000
2021-05-30 17:26:10,812 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:10,812 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:10,812 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:10,812 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:10,812 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:10,812 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:10,812 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:10,812 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:10,812 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:10,812 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:10,812 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:10,812 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:10,813 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:10,813 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:10,813 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:10,813 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:10,813 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:10,813 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:10,813 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       50: bleu:   0.01, loss: 1002.5289, ppl:  14.1851, duration: 0.1290s
2021-05-30 17:26:10,932 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:10,958 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:10,958 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:11,276 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:11,298 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:11,299 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:11,559 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:11,589 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:11,589 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:12,206 - INFO - joeynmt.training - Epoch   1, Step:       60, Batch Loss:    32.723629, Tokens per Sec:      935, Lr: 0.005000
2021-05-30 17:26:12,329 - INFO - joeynmt.training - Hooray! New best validation result [loss]!
2021-05-30 17:26:12,330 - INFO - joeynmt.training - Saving new checkpoint.
2021-05-30 17:26:12,335 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:12,335 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:12,335 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:12,335 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:12,335 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:12,335 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:12,336 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:12,336 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:12,336 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:12,336 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:12,336 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:12,336 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:12,336 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:12,336 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:12,336 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:12,336 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:12,336 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:12,336 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:12,336 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       60: bleu:   0.01, loss: 992.4551, ppl:  13.8121, duration: 0.1300s
2021-05-30 17:26:12,448 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:12,474 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:12,474 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:12,742 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:12,768 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:12,768 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:13,051 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:13,077 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:13,077 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:13,689 - INFO - joeynmt.training - Epoch   1, Step:       70, Batch Loss:    53.196281, Tokens per Sec:     1015, Lr: 0.005000
2021-05-30 17:26:13,818 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:13,818 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:13,818 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:13,818 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:13,818 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:13,818 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:13,819 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:13,819 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:13,819 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:13,819 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:13,819 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:13,819 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:13,819 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:13,819 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:13,819 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:13,819 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:13,819 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:13,820 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:13,820 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       70: bleu:   0.01, loss: 1002.3388, ppl:  14.1780, duration: 0.1301s
2021-05-30 17:26:13,956 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:13,987 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:13,988 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:14,319 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:14,341 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:14,341 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:14,583 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:14,609 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:14,609 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:15,264 - INFO - joeynmt.training - Epoch   1, Step:       80, Batch Loss:    48.362408, Tokens per Sec:      960, Lr: 0.005000
2021-05-30 17:26:15,386 - INFO - joeynmt.training - Hooray! New best validation result [loss]!
2021-05-30 17:26:15,387 - INFO - joeynmt.training - Saving new checkpoint.
2021-05-30 17:26:15,391 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:15,391 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:15,392 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:15,392 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:15,392 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:15,392 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:15,392 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:15,392 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:15,392 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:15,392 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:15,392 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       80: bleu:   0.01, loss: 987.8223, ppl:  13.6438, duration: 0.1285s
2021-05-30 17:26:15,498 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:15,523 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:15,523 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:15,793 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:15,816 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:15,816 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:16,111 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:16,147 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:16,147 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:16,761 - INFO - joeynmt.training - Epoch   1, Step:       90, Batch Loss:    41.305531, Tokens per Sec:     1063, Lr: 0.005000
2021-05-30 17:26:16,925 - INFO - joeynmt.training - Example #0
2021-05-30 17:26:16,926 - DEBUG - joeynmt.training - 	Raw source:     ['ich', 'freue', 'mich', ',', 'dass', 'ich', 'da', 'bin', '.']
2021-05-30 17:26:16,926 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:16,926 - INFO - joeynmt.training - 	Source:     ich freue mich , dass ich da bin .
2021-05-30 17:26:16,926 - INFO - joeynmt.training - 	Reference:  i’m happy to be here .
2021-05-30 17:26:16,926 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:16,926 - INFO - joeynmt.training - Example #1
2021-05-30 17:26:16,926 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'guten', 'tag', '.']
2021-05-30 17:26:16,926 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:16,926 - INFO - joeynmt.training - 	Source:     ja , guten tag .
2021-05-30 17:26:16,926 - INFO - joeynmt.training - 	Reference:  yes , hello .
2021-05-30 17:26:16,926 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:16,926 - INFO - joeynmt.training - Example #2
2021-05-30 17:26:16,926 - DEBUG - joeynmt.training - 	Raw source:     ['ja', ',', 'also', ',', 'was', 'soll', 'biohacking', 'sein', '?']
2021-05-30 17:26:16,926 - DEBUG - joeynmt.training - 	Raw hypothesis: ['<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>', '<unk>']
2021-05-30 17:26:16,927 - INFO - joeynmt.training - 	Source:     ja , also , was soll biohacking sein ?
2021-05-30 17:26:16,927 - INFO - joeynmt.training - 	Reference:  yes , so , what is biohacking ?
2021-05-30 17:26:16,927 - INFO - joeynmt.training - 	Hypothesis: <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk> <unk>
2021-05-30 17:26:16,927 - INFO - joeynmt.training - Validation result (greedy) at epoch   1, step       90: bleu:   0.01, loss: 1000.0751, ppl:  14.0933, duration: 0.1650s
2021-05-30 17:26:17,034 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:17,061 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:17,061 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:17,368 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:17,395 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:17,395 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:17,680 - DEBUG - matplotlib.backends.backend_pdf - Assigning font /b'F1' = '/home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf'
2021-05-30 17:26:17,705 - DEBUG - matplotlib.backends.backend_pdf - Embedding font /home/sethjsa/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf.
2021-05-30 17:26:17,705 - DEBUG - matplotlib.backends.backend_pdf - Writing TrueType font.
2021-05-30 17:26:18,045 - INFO - joeynmt.training - Epoch   1: total training loss 3845.91
2021-05-30 17:26:18,046 - INFO - joeynmt.training - Training ended after   1 epochs.
2021-05-30 17:26:18,046 - INFO - joeynmt.training - Best validation result (greedy) at step       80: 987.82 loss.
2021-05-30 17:26:18,063 - INFO - joeynmt.prediction - Process device: cpu, n_gpu: 0, batch_size per device: 50 (with beam_size)
2021-05-30 17:26:18,067 - INFO - joeynmt.model - Building an encoder-decoder model...
2021-05-30 17:26:18,069 - INFO - joeynmt.model - Enc-dec model built.
2021-05-30 17:26:18,069 - INFO - joeynmt.prediction - Decoding on dev set (test/data/toy/dev.en)...
2021-05-30 17:26:18,196 - INFO - joeynmt.prediction -  dev bleu[13a]:   0.01 [Beam search decoding with beam size = 5 and alpha = 1.0]
2021-05-30 17:26:18,197 - INFO - joeynmt.prediction - Translations saved to: models/small_model/00000080.hyps.dev
2021-05-30 17:26:18,197 - INFO - joeynmt.prediction - Decoding on test set (test/data/toy/test.en)...
2021-05-30 17:26:18,317 - INFO - joeynmt.prediction - No references given for test -> no evaluation.
2021-05-30 17:26:18,317 - INFO - joeynmt.prediction - Translations saved to: models/small_model/00000080.hyps.test
